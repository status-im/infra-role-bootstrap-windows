---
- name: 'Generate semi-random user password'
  tags: ['role::bootstrap:users']
  set_fact:
    # We set garbage since we use SSH keys anyway
    user_password: '{{ ansible_date_time.epoch | password_hash("sha512") }}'

- name: 'Save admin password'
  tags: ['role::bootstrap:users']
  set_fact:
    admin_password: '{{ user_password }}'
  when: user.name == "admin"

- name: '{{ user.name }} - Create user'
  tags: ['role::bootstrap:users']
  win_user:
    name: '{{ user.name }}'
    groups: |
      {{ user.get("win_groups", []) + bootstrap__default_groups +
      (user.get("admin", false) | ternary(bootstrap__admin_groups, []))
      | list }}
    profile: 'C:\Users\{{ user.name }}'
    home_directory: 'C:\Users\{{ user.name }}'
    password: '{{ user_password }}'

- name: '{{ user.name }} - Create profile'
  tags: ['role::bootstrap:users']
  win_user_profile:
    username: '{{ user.name }}'

- name: '{{ user.name }} - Create SSH config directory'
  tags: ['role::bootstrap:users']
  win_file:
    path: 'C:\Users\{{ user.name }}\.ssh'
    state: 'directory'

- name: '{{ user.name }} - Copy over SSH public key from entry'
  tags: ['role::bootstrap:users']
  win_copy:
    dest: 'C:\Users\{{ user.name }}\.ssh\authorized_keys'
    content: '{{ user.key }}'
  when: user.key is defined

- name: '{{ user.name }} - Copy over SSH public key from file'
  tags: ['role::bootstrap:users']
  win_copy:
    dest: 'C:\Users\{{ user.name }}\.ssh\authorized_keys'
    src: '{{ role_path }}/files/keys/{{ user.name }}.pub'
  when: user.key is not defined

- name: '{{ user.name }} - Set the owner of user SSH files'
  tags: ['role::bootstrap:users']
  win_owner:
    path: 'C:\Users\{{ user.name }}\.ssh'
    user: '{{ user.name }}'
    recurse: true
